{"ast":null,"code":"const Language = {};\nconst SCOPE = {};\nSCOPE['alert'] = window.alert;\n\nLanguage.define = function define(property) {\n  SCOPE[property] = undefined;\n};\n\nLanguage.assign = function assign(property, value) {\n  SCOPE[property] = value;\n};\n\nLanguage.plus = function plus(firstOperand, secondOperand) {\n  return firstOperand + secondOperand;\n};\n\nLanguage.minus = function minus(firstOperand, secondOperand) {\n  return firstOperand - secondOperand;\n};\n\nLanguage.multiply = function multiply(firstOperand, secondOperand) {\n  return firstOperand * secondOperand;\n};\n\nLanguage.divide = function divide(firstOperand, secondOperand) {\n  return firstOperand / secondOperand;\n};\n\nLanguage.equal = function equal(firstOperand, secondOperand) {\n  return firstOperand === secondOperand;\n};\n\nLanguage.greaterThan = function greaterThan(firstOperand, secondOperand) {\n  return firstOperand > secondOperand;\n};\n\nLanguage.lessThan = function lessThan(firstOperand, secondOperand) {\n  return firstOperand < secondOperand;\n};\n\nLanguage.greaterOrEqualThan = function greaterOrEqualThan(firstOperand, secondOperand) {\n  return Language.greaterThan(firstOperand, secondOperand) || Language.equal(firstOperand, secondOperand);\n};\n\nLanguage.lessOrEqualThan = function lessOrEqualThan(firstOperand, secondOperand) {\n  return Language.lessThan(firstOperand, secondOperand) || Language.equal(firstOperand, secondOperand);\n};\n\nLanguage.if = function ifCondition(condition, whenTrue, whenFalse) {};\n\nLanguage.forEach = function forEach(items, callback) {\n  items.forEach(item => callback(item));\n};\n\nLanguage.execute = function execute(callback) {\n  console.log(arguments);\n  callback();\n};\n\nLanguage.call = function call(fn) {};\n\nLanguage.evaluate = function evaluate(expressions) {\n  Language.forEach(expressions, expression => {\n    if (expression.type === 'define') {\n      Language.define(expression.name);\n    } else if (expression.type === 'assign') {\n      Language.assign(expression.name, expression.value);\n      Language.execute(SCOPE.alert);\n    }\n  });\n  console.log(SCOPE);\n};\n\nexport default Language;","map":{"version":3,"sources":["C:/GitProject/radenv/interpreter/src/modules/Language.js"],"names":["Language","SCOPE","window","alert","define","property","undefined","assign","value","plus","firstOperand","secondOperand","minus","multiply","divide","equal","greaterThan","lessThan","greaterOrEqualThan","lessOrEqualThan","if","ifCondition","condition","whenTrue","whenFalse","forEach","items","callback","item","execute","console","log","arguments","call","fn","evaluate","expressions","expression","type","name"],"mappings":"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","sourcesContent":["const Language = {}\r\n\r\nconst SCOPE = {}\r\n\r\nSCOPE['alert'] = window.alert\r\n\r\nLanguage.define = function define(property) {\r\n  SCOPE[property] = undefined\r\n}\r\n\r\nLanguage.assign = function assign(property, value) {\r\n  SCOPE[property] = value\r\n}\r\n\r\nLanguage.plus = function plus(firstOperand, secondOperand) {\r\n  return firstOperand + secondOperand\r\n}\r\n\r\nLanguage.minus = function minus(firstOperand, secondOperand) {\r\n  return firstOperand - secondOperand\r\n}\r\n\r\nLanguage.multiply = function multiply(firstOperand, secondOperand) {\r\n  return firstOperand * secondOperand\r\n}\r\n\r\nLanguage.divide = function divide(firstOperand, secondOperand) {\r\n  return firstOperand / secondOperand\r\n}\r\n\r\nLanguage.equal = function equal(firstOperand, secondOperand) {\r\n  return firstOperand === secondOperand\r\n}\r\n\r\nLanguage.greaterThan = function greaterThan(firstOperand, secondOperand) {\r\n  return firstOperand > secondOperand\r\n}\r\n\r\nLanguage.lessThan = function lessThan(firstOperand, secondOperand) {\r\n  return firstOperand < secondOperand\r\n}\r\n\r\nLanguage.greaterOrEqualThan = function greaterOrEqualThan(firstOperand, secondOperand) {\r\n  return Language.greaterThan(firstOperand, secondOperand) || Language.equal(firstOperand, secondOperand)\r\n}\r\n\r\nLanguage.lessOrEqualThan = function lessOrEqualThan(firstOperand, secondOperand) {\r\n  return Language.lessThan(firstOperand, secondOperand) || Language.equal(firstOperand, secondOperand)\r\n}\r\n\r\nLanguage.if = function ifCondition(condition, whenTrue, whenFalse) {}\r\n\r\nLanguage.forEach = function forEach(items, callback) {\r\n  items.forEach(item => callback(item))\r\n}\r\n\r\nLanguage.execute = function execute(callback) {\r\n  console.log(arguments)\r\n  callback()\r\n}\r\n\r\nLanguage.call = function call(fn) {}\r\n\r\nLanguage.evaluate = function evaluate(expressions) {\r\n  Language.forEach(expressions, expression => {\r\n    if (expression.type === 'define') {\r\n      Language.define(expression.name)\r\n    } else if (expression.type === 'assign') {\r\n      Language.assign(expression.name, expression.value)\r\n      Language.execute(SCOPE.alert)\r\n    }\r\n  })\r\n  console.log(SCOPE)\r\n}\r\n\r\nexport default Language\r\n"]},"metadata":{},"sourceType":"module"}