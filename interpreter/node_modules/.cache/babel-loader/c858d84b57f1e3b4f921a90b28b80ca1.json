{"ast":null,"code":"const Language = {};\nconst SCOPE = {};\n\nLanguage.define = function define(property) {\n  SCOPE[property] = undefined;\n};\n\nLanguage.assign = function assign(property, value) {\n  SCOPE[property] = value;\n};\n\nLanguage.plus = function plus(operand1, operand2) {\n  return operand1 + operand2;\n};\n\nLanguage.minus = function minus(operand1, operand2) {\n  return operand1 - operand2;\n};\n\nLanguage.multiply = function multiply(operand1, operand2) {\n  return operand1 * operand2;\n};\n\nLanguage.divide = function divide(operand1, operand2) {\n  return operand1 / operand2;\n};\n\nLanguage.equal = function equal(operand1, operand2) {\n  return operand1 === operand2;\n};\n\nLanguage.greaterThan = function greaterThan(operand1, operand2) {\n  return operand1 > operand2;\n};\n\nLanguage.lessThan = function lessThan(operand1, operand2) {\n  return operand1 < operand2;\n};\n\nLanguage.greaterOrEqualThan = function greaterOrEqualThan(operand1, operand2) {\n  return Language.greaterThan(operand1, operand2) || Language.equal(operand1, operand2);\n};\n\nLanguage.lessOrEqualThan = function lessOrEqualThan(operand1, operand2) {\n  return Language.lessThan(operand1, operand2) || Language.equal(operand1, operand2);\n};\n\nLanguage.if = function ifCondition(condition, whenTrue, whenFalse) {};\n\nLanguage.forEach = function forEach(items, callback) {\n  items.forEach(item => callback(item));\n};\n\nLanguage.execute = function execute(fn) {};\n\nLanguage.call = function call(fn) {};\n\nLanguage.evaluate = function evaluate(expression) {\n  console.log(expression);\n};\n\nexport default Language;","map":{"version":3,"sources":["C:/GitProject/radenv/interpreter/src/modules/Language.js"],"names":["Language","SCOPE","define","property","undefined","assign","value","plus","operand1","operand2","minus","multiply","divide","equal","greaterThan","lessThan","greaterOrEqualThan","lessOrEqualThan","if","ifCondition","condition","whenTrue","whenFalse","forEach","items","callback","item","execute","fn","call","evaluate","expression","console","log"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,EAAjB;AAEA,MAAMC,KAAK,GAAG,EAAd;;AAEAD,QAAQ,CAACE,MAAT,GAAkB,SAASA,MAAT,CAAgBC,QAAhB,EAA0B;AAC1CF,EAAAA,KAAK,CAACE,QAAD,CAAL,GAAkBC,SAAlB;AACD,CAFD;;AAIAJ,QAAQ,CAACK,MAAT,GAAkB,SAASA,MAAT,CAAgBF,QAAhB,EAA0BG,KAA1B,EAAiC;AACjDL,EAAAA,KAAK,CAACE,QAAD,CAAL,GAAkBG,KAAlB;AACD,CAFD;;AAIAN,QAAQ,CAACO,IAAT,GAAgB,SAASA,IAAT,CAAcC,QAAd,EAAwBC,QAAxB,EAAkC;AAChD,SAAOD,QAAQ,GAAGC,QAAlB;AACD,CAFD;;AAIAT,QAAQ,CAACU,KAAT,GAAiB,SAASA,KAAT,CAAeF,QAAf,EAAyBC,QAAzB,EAAmC;AAClD,SAAOD,QAAQ,GAAGC,QAAlB;AACD,CAFD;;AAIAT,QAAQ,CAACW,QAAT,GAAoB,SAASA,QAAT,CAAkBH,QAAlB,EAA4BC,QAA5B,EAAsC;AACxD,SAAOD,QAAQ,GAAGC,QAAlB;AACD,CAFD;;AAIAT,QAAQ,CAACY,MAAT,GAAkB,SAASA,MAAT,CAAgBJ,QAAhB,EAA0BC,QAA1B,EAAoC;AACpD,SAAOD,QAAQ,GAAGC,QAAlB;AACD,CAFD;;AAIAT,QAAQ,CAACa,KAAT,GAAiB,SAASA,KAAT,CAAeL,QAAf,EAAyBC,QAAzB,EAAmC;AAClD,SAAOD,QAAQ,KAAKC,QAApB;AACD,CAFD;;AAIAT,QAAQ,CAACc,WAAT,GAAuB,SAASA,WAAT,CAAqBN,QAArB,EAA+BC,QAA/B,EAAyC;AAC9D,SAAOD,QAAQ,GAAGC,QAAlB;AACD,CAFD;;AAIAT,QAAQ,CAACe,QAAT,GAAoB,SAASA,QAAT,CAAkBP,QAAlB,EAA4BC,QAA5B,EAAsC;AACxD,SAAOD,QAAQ,GAAGC,QAAlB;AACD,CAFD;;AAIAT,QAAQ,CAACgB,kBAAT,GAA8B,SAASA,kBAAT,CAA4BR,QAA5B,EAAsCC,QAAtC,EAAgD;AAC5E,SAAOT,QAAQ,CAACc,WAAT,CAAqBN,QAArB,EAA+BC,QAA/B,KAA4CT,QAAQ,CAACa,KAAT,CAAeL,QAAf,EAAyBC,QAAzB,CAAnD;AACD,CAFD;;AAIAT,QAAQ,CAACiB,eAAT,GAA2B,SAASA,eAAT,CAAyBT,QAAzB,EAAmCC,QAAnC,EAA6C;AACtE,SAAOT,QAAQ,CAACe,QAAT,CAAkBP,QAAlB,EAA4BC,QAA5B,KAAyCT,QAAQ,CAACa,KAAT,CAAeL,QAAf,EAAyBC,QAAzB,CAAhD;AACD,CAFD;;AAIAT,QAAQ,CAACkB,EAAT,GAAc,SAASC,WAAT,CAAqBC,SAArB,EAAgCC,QAAhC,EAA0CC,SAA1C,EAAqD,CAAE,CAArE;;AAEAtB,QAAQ,CAACuB,OAAT,GAAmB,SAASA,OAAT,CAAiBC,KAAjB,EAAwBC,QAAxB,EAAkC;AACnDD,EAAAA,KAAK,CAACD,OAAN,CAAcG,IAAI,IAAID,QAAQ,CAACC,IAAD,CAA9B;AACD,CAFD;;AAIA1B,QAAQ,CAAC2B,OAAT,GAAmB,SAASA,OAAT,CAAiBC,EAAjB,EAAqB,CAAE,CAA1C;;AAEA5B,QAAQ,CAAC6B,IAAT,GAAgB,SAASA,IAAT,CAAcD,EAAd,EAAkB,CAAE,CAApC;;AAEA5B,QAAQ,CAAC8B,QAAT,GAAoB,SAASA,QAAT,CAAkBC,UAAlB,EAA8B;AAChDC,EAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AACD,CAFD;;AAIA,eAAe/B,QAAf","sourcesContent":["const Language = {}\r\n\r\nconst SCOPE = {}\r\n\r\nLanguage.define = function define(property) {\r\n  SCOPE[property] = undefined\r\n}\r\n\r\nLanguage.assign = function assign(property, value) {\r\n  SCOPE[property] = value\r\n}\r\n\r\nLanguage.plus = function plus(operand1, operand2) {\r\n  return operand1 + operand2\r\n}\r\n\r\nLanguage.minus = function minus(operand1, operand2) {\r\n  return operand1 - operand2\r\n}\r\n\r\nLanguage.multiply = function multiply(operand1, operand2) {\r\n  return operand1 * operand2\r\n}\r\n\r\nLanguage.divide = function divide(operand1, operand2) {\r\n  return operand1 / operand2\r\n}\r\n\r\nLanguage.equal = function equal(operand1, operand2) {\r\n  return operand1 === operand2\r\n}\r\n\r\nLanguage.greaterThan = function greaterThan(operand1, operand2) {\r\n  return operand1 > operand2\r\n}\r\n\r\nLanguage.lessThan = function lessThan(operand1, operand2) {\r\n  return operand1 < operand2\r\n}\r\n\r\nLanguage.greaterOrEqualThan = function greaterOrEqualThan(operand1, operand2) {\r\n  return Language.greaterThan(operand1, operand2) || Language.equal(operand1, operand2)\r\n}\r\n\r\nLanguage.lessOrEqualThan = function lessOrEqualThan(operand1, operand2) {\r\n  return Language.lessThan(operand1, operand2) || Language.equal(operand1, operand2)\r\n}\r\n\r\nLanguage.if = function ifCondition(condition, whenTrue, whenFalse) {}\r\n\r\nLanguage.forEach = function forEach(items, callback) {\r\n  items.forEach(item => callback(item))\r\n}\r\n\r\nLanguage.execute = function execute(fn) {}\r\n\r\nLanguage.call = function call(fn) {}\r\n\r\nLanguage.evaluate = function evaluate(expression) {\r\n  console.log(expression)\r\n}\r\n\r\nexport default Language\r\n"]},"metadata":{},"sourceType":"module"}